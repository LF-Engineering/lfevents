/*!
 * Gutenberg Editor Styles
 */

/** === Includes === */

@charset 'utf-8';

@import 'settings';
@import 'foundation';

// @include foundation-typography;
// Don't include all foundation-typography; it clobbers wp-block styles
// HACK: Copy specific pieces of foundation typography's _base.scss

// Paragraphs
p {
	margin-bottom: $paragraph-margin-bottom;

	font-size: inherit;
	line-height: $paragraph-lineheight;
	text-rendering: $paragraph-text-rendering;
}

// Emphasized text
em,
i {
	font-style: italic;
	line-height: inherit;
}

// Strong text
strong,
b {
	font-weight: $global-weight-bold;
	line-height: inherit;
}

// Small text
small {
	font-size: $small-font-size;
	line-height: inherit;
}

// Headings
h1, .h1,
h2, .h2,
h3, .h3,
h4, .h4,
h5, .h5,
h6, .h6 {
	font-family: $header-font-family;
	font-style: $header-font-style;
	font-weight: $header-font-weight;
	color: $header-color;
	text-rendering: $header-text-rendering;

	small {
		line-height: 0;
		color: $header-small-font-color;
	}
}

// Heading styles
@each $size, $headers in $header-styles {
	@include breakpoint($size) {
		@each $header, $header-defs in $headers {
			$font-size-temp: 1rem;
			#{$header}, .#{$header} {

				@if map-has-key($header-defs, font-size) {
					$font-size-temp: rem-calc(map-get($header-defs, font-size));
					font-size: $font-size-temp;
				} @else if map-has-key($header-defs, fs) {
					$font-size-temp: rem-calc(map-get($header-defs, fs));
					font-size: $font-size-temp;
				} @else if $size == $-zf-zero-breakpoint {
					font-size: $font-size-temp;
				}
				@if map-has-key($header-defs, line-height) {
					line-height: unitless-calc(map-get($header-defs, line-height), $font-size-temp);
				} @else if map-has-key($header-defs, lh) {
					line-height: unitless-calc(map-get($header-defs, lh), $font-size-temp);
				} @else if $size == $-zf-zero-breakpoint {
					line-height: unitless-calc($header-lineheight, $font-size-temp);
				}

				@if map-has-key($header-defs, margin-top) {
					margin-top: rem-calc(map-get($header-defs, margin-top));
				} @else if map-has-key($header-defs, mt) {
					margin-top: rem-calc(map-get($header-defs, mt));
				} @else if $size == $-zf-zero-breakpoint {
					margin-top: 0;
				}
				@if map-has-key($header-defs, margin-bottom) {
					margin-bottom: rem-calc(map-get($header-defs, margin-bottom));
				} @else if map-has-key($header-defs, mb) {
					margin-bottom: rem-calc(map-get($header-defs, mb));
				} @else if $size == $-zf-zero-breakpoint {
					margin-bottom: rem-calc($header-margin-bottom);
				}
			}
		}
	}
}

// Links
a {
	line-height: inherit;
	color: $anchor-color;
	text-decoration: $anchor-text-decoration;

	cursor: pointer;

	&:hover,
	&:focus {
		color: $anchor-color-hover;
		@if $anchor-text-decoration-hover != $anchor-text-decoration {
			text-decoration: $anchor-text-decoration-hover;
		}
	}

	img {
		border: 0;
	}
}

// Horizontal rule
hr {
	clear: both;

	max-width: $hr-width;
	height: 0;
	margin: $hr-margin;

	border-top: 0;
	border-right: 0;
	border-bottom: $hr-border;
	border-left: 0;
}

// Lists
ul,
ol,
dl {
	margin-bottom: $list-margin-bottom;
	list-style-position: $list-style-position;
	line-height: $list-lineheight;
}

// List items
li {
	font-size: inherit;
}

// Unordered lists
ul {
	margin-#{$global-left}: $list-side-margin;
	list-style-type: $list-style-type;
}

// Ordered lists
ol {
	margin-#{$global-left}: $list-side-margin;
}

// Nested unordered/ordered lists
ul, ol {
	& & {
		margin-#{$global-left}: $list-nested-side-margin;
		margin-bottom: 0;
	}
}

// Definition lists
dl {
	margin-bottom: $defnlist-margin-bottom;

	dt {
		margin-bottom: $defnlist-term-margin-bottom;
		font-weight: $defnlist-term-weight;
	}
}

// Blockquotes
blockquote {
	margin: 0 0 $paragraph-margin-bottom;
	padding: $blockquote-padding;
	border-#{$global-left}: $blockquote-border;

	&, p {
		line-height: $paragraph-lineheight;
		color: $blockquote-color;
	}
}

// Abbreviations
abbr, abbr[title] {
	border-bottom: $abbr-underline;
	cursor: help;
	text-decoration: none;
}

@include foundation-button;
@include foundation-table;


/** === Content Width === */
// .wp-block {
// 	width: calc(100% - (2 * 10));
// 	@each $breakpoint, $size in $grid-margin-gutters {
//
// 		@include breakpoint($breakpoint) {
// 			width: calc(100% - #{$size});
// 		}
//
// 	}
// }

/** === Base Typography === */
body {
	font-size: $global-font-size;
	font-family: $body-font-family;
	color: $body-font-color;
}

/** === Post Title === */
.editor-post-title__block .editor-post-title__input{
  @extend h1;
}

/** === Button === */
.wp-block-button {

	// add general foundation button styling to button in editor
	.wp-block-button__link {
		@extend .button;
	}

	// add special styling for squared buttons
	&.is-style-squared .wp-block-button__link {
		border-radius: 0;
	}

	// add outline styles
	&.is-style-outline .wp-block-button__link{
		@extend .hollow;
	}

	// set transparent background to block for outline button
	&.is-style-outline,
	&.is-style-outline:hover,
	&.is-style-outline:focus,
	&.is-style-outline:active {
		background: transparent;
	}
}

/** === File === */
.wp-block-file__button{
	@include button();
}

/** === Pullquote === */
.wp-block-paragraph.has-background{
	padding: rem-calc(20px 30px);
}

/** === Table === */
.wp-block-table td{
	border: none;
}

/** === Latest Posts grid view === */
.wp-block-latest-posts.is-grid{
	list-style: none;
}
